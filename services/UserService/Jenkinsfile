pipeline{
    agent any
    environment{
        CLOUDSDK_CORE_PROJECT='	polar-watch-462012-k9'
    }
    tools{
        maven 'maven'
    }
    stages{
     
     stage("Build"){
        steps{
            checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/void601/Ecommerce-with-Spring-Boot-Microservices.git']])
            dir("services/UserService"){
               sh "mvn clean install"
            }
        }
     }
    stage("Build Docker Image"){
        steps{
            dir("services/UserService"){
            script{
                sh "docker build -t void601/user-service ."
            }
        }
        }
    }
    stage("Push Docker Image to Dockerhub"){
        steps{
            script{
                withCredentials([string(credentialsId: 'dockerhubpwd', variable: 'dockerhubpwd')]) {
                sh "docker login -u void601 -p ${dockerhubpwd}"
                sh "docker push void601/user-service"
            }
        }
    }
  }
  stage('Push to Google Container Registry') {
        steps {
                withCredentials([file(credentialsId: 'gcp-cred', variable: 'GCP_KEY')]) {
                    sh 'gcloud auth activate-service-account --key-file=$GCP_KEY'
                    sh "gcloud config set project polar-watch-462012-k9"
                    sh "gcloud auth configure-docker --quiet"
                    sh "docker push void601/user-service"
                }
            }
        }

   stage('Deploy to GKE') {
            steps {
                withCredentials([file(credentialsId: 'gcp-cred', variable: 'GCP_KEY')]) {
                    sh 'gcloud auth activate-service-account --key-file=$GCP_KEY'
                    sh "gcloud config set project polar-watch-462012-k9"
                    sh "gcloud container clusters get-credentials k8s-cluster --zone us-central1"
                    sh 'kubectl apply -f k8s/user-deployment.yaml'
                    sh 'kubectl apply -f k8s/user-service.yaml'
                }
            }
}
}
}
