spring.application.name=Product-Service

# Server configuration
server.port=8082

springdoc.api-docs.enabled=true
springdoc.swagger-ui.enabled=true
springdoc.swagger-ui.path=/swagger-ui.html

# Database configuration (PostgreSQL)
spring.datasource.url=jdbc:postgresql://localhost:5432/productdb
spring.datasource.username=void
spring.datasource.password=doiv
spring.datasource.driver-class-name=org.postgresql.Driver

# Hibernate (JPA) configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true

inventory.service.url=http://localhost/8090
# 5 seconds timeout
resilience4j.timelimiter.instances.exampleTimeout.timeoutDuration=60000ms
# 5 seconds timeout for health checks
#management.endpoint.health.timeout=5000ms

# Resilience4j Retry Configuration
resilience4j.retry.instances.fakeStoreService.max-attempts=2
resilience4j.retry.instances.fakeStoreService.wait-duration=1000ms
resilience4j.retry.instances.fakeStoreService.retry-exceptions=org.springframework.web.client.HttpServerErrorException,org.springframework.web.client.ResourceAccessException,java.io.IOException


# Resilience4j Retry Configuration
resilience4j.retry.instances.dummyJsonService.max-attempts=2
resilience4j.retry.instances.dummyJsonService.wait-duration=1000ms
resilience4j.retry.instances.dummyJsonService.retry-exceptions=org.springframework.web.client.HttpServerErrorException,org.springframework.web.client.ResourceAccessException,java.io.IOException

# Resilience4j Circuit Breaker Configuration
resilience4j.circuitbreaker.instances.fakeStoreService.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.fakeStoreService.slow-call-rate-threshold=50
resilience4j.circuitbreaker.instances.fakeStoreService.slow-call-duration-threshold=60000ms
resilience4j.circuitbreaker.instances.fakeStoreService.wait-duration-in-open-state=40000ms
resilience4j.circuitbreaker.instances.fakeStoreService.permitted-number-of-calls-in-half-open-state=2
resilience4j.circuitbreaker.instances.fakeStoreService.sliding-window-size=10
resilience4j.circuitbreaker.instances.fakeStoreService.minimum-number-of-calls=4


resilience4j.circuitbreaker.instances.dummyJsonService.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.dummyJsonService.slow-call-rate-threshold=50
resilience4j.circuitbreaker.instances.dummyJsonService.slow-call-duration-threshold=60000ms
resilience4j.circuitbreaker.instances.dummyJsonService.wait-duration-in-open-state=40000ms
resilience4j.circuitbreaker.instances.dummyJsonService.permitted-number-of-calls-in-half-open-state=2
resilience4j.circuitbreaker.instances.dummyJsonService.sliding-window-size=10
resilience4j.circuitbreaker.instances.dummyJsonService.minimum-number-of-calls=4

# ThreadPool Bulkhead Configuration (Semaphore)
# Max number of concurrent calls allowed
resilience4j.bulkhead.instances.externalService.maxConcurrentCalls=10
# Max time a thread waits to enter the bulkhead
resilience4j.bulkhead.instances.externalService.maxWaitDuration=500ms

# Resilience4j Rate Limiter configuration
# Configures a rate limiter instance named 'myService' to control request rates
# Sets the maximum number of requests allowed in the defined period (e.g., 5 requests)
resilience4j.ratelimiter.instances.myService.limit-for-period=5
# Defines the time window after which the limit resets (e.g., every 10 seconds)
resilience4j.ratelimiter.instances.myService.limit-refresh-period=10s
# Specifies how long a request waits for permission before failing (e.g., 1 second)
resilience4j.ratelimiter.instances.myService.timeout-duration=1s
# Enables health monitoring of this rate limiter via Actuator's /health endpoint
resilience4j.ratelimiter.instances.myService.register-health-indicator=true

# ============================
# ThreadPool Bulkhead Configuration
# ============================

# The minimum number of threads that are always kept alive in the pool
resilience4j.thread-pool-bulkhead.instances.myServiceBulkhead.core-thread-pool-size=2

# The maximum number of threads that can be created when demand increases
resilience4j.thread-pool-bulkhead.instances.myServiceBulkhead.max-thread-pool-size=5

# The maximum number of requests that can wait in the queue before being rejected
resilience4j.thread-pool-bulkhead.instances.myServiceBulkhead.queue-capacity=10


# Actuator Configuration for Monitoring
# Exposes specific Actuator endpoints for monitoring.
# Includes health, metrics, and Circuit Breaker endpoints.

#management.endpoints.web.exposure.include=health,metrics,circuitbreakers,threaddump
management.endpoints.web.exposure.include=*
management.server.port=9093

# Enable Prometheus metrics
management.endpoint.metrics.enabled=true
management.endpoint.prometheus.enabled=true
management.metrics.export.prometheus.enabled=true

# Configures the health endpoint to show detailed health information.
# Always shows details like the status of the Circuit Breaker.
management.endpoint.health.show-details=always

logging.level.io.github.resilience4j=INFO
#logging.level.org.springframework.web.client=DEBUG

## Kafka broker address (Bootstrap server)
#spring.kafka.bootstrap-servers=localhost:9092
##spring.kafka.bootstrap-servers=
## Producer Configuration
## Key Serializer - Converts keys to byte format for Kafka
#spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
## Value Serializer - Converts message values to JSON format for Kafka
#spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
#default.replication.factor=1

#keycloak config
keycloak.realm=microservices-realm
keycloak.auth-server-url=http://localhost:8080
keycloak.resource=microservice-client
keycloak.public-client=true
keycloak.bearer-only=true

logging.level.org.springframework.security=DEBUG
logging.level.org.keycloak=DEBUG



